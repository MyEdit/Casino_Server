Зачем нужен сервер, что это такое и с чем его есть
Предоставляет доступы
Взаимодействие клиентов меж собой
Используемая технология обработки данных - сокеты
Используемый протокол обмена данными
Как обрабатываются запросы наример модели от админа

#Класс отвечающий за серверный код
network/NetworkServer:
    - sendToClient() - Шаблонный метод отправки пакета клиенту с указанием ему размера пакета
    - getMessageFromClient() - Шаблонный метод получения пакета от клиента
    - getMessageFromClient() - Шаблонный метод получения пакета (QByteArray) от клиента

#Классы отвечающие за обработку пакетов
network/PacketActions:

#Абстрактный класс пользователей
Users/User:

#Класс игрока
Users/Player:

#Класс сотрудника
Users/StuffUser:

#Класс отвечающий за обновление информации о столах
Utils/Updater:
    - init() - Регистрирует слушателя тикера
    - onTick() - Выполняется каждую итерацию тикера, запускает обновление информации о столах
    - startTablesUpdate() - Обновляет информацию о столах
    - createOrUpdateTable() - Добавляет или обновляет информацию о столе
    - deleteTable() - Удаляет неактуальные столы
    
#Класс тикера
Utils/Ticker:
    - addListener() - Добавляет слушателей тикера
    - init() - Запускает поток тикера
    - runTickerLoop() - Бесконечный цикл с работой тикера, каждую секунду вызывает методы слушателей
    - getValidCallbacks() - Проверяет доступность методов у слушателей
    
#Класс сериализатора моделей для отправки клиентам
Utils/Serializer:
    - serializeDataModel() - Сериализует модель в QByteArray
    
#Утилитарный класс отвечающий за логгирование информации, предупреждений, ошибок
Utils/Message:

#Класс менеджера поиска в БД
Utils/Search/SearchManager:
    - launchSearch() - Метод запускающий n-нное множество потоков поиска в БД
    - requestRowCount() - Метод устанавливающий кол-во записей в таблице для работы поиска
    - handleSearchResult() - Обработчик результатов от потоков поиска
    
#Класс поиска в БД
Utils/Search/SearchThread:
    - process() - Метод выполняющий поиск в БД
    
#Класс стола
Games/Table:
    - setTicker() - Регистрирует слушателя тикера
    - onTick() - Выполняется каждую итерацию тикера, проверяет условия для запуска игры
    - joinPlayer() - Добавляет игрока в стол
    - leavePlayer() - Обработка выхода игрока из стола
    - sendTimerData() - Отправляет клиентам информацию о таймере (Время до начала старта игры)
    - addTable() - Добавляет новый стол в глобальную коллекцию
    - canPlayerJoin() - Метод определяющий может ли игрок присоедениться к столу
    - updatePlayersList() - Метод проверяющий актуальность игроков в столе
    
#Абстрактный класс игры
Games/Game:
    - registerGame() - Регистрирует новую игру
    - onTick() - Выполняется каждую итерацию тикера, проверяет условия для принудительного завершения игры
    - onGamePacketReceived() - Обработчик игровых пакетов
    - giveCardToPlayer() - Метод выдающий рандомную карту из колоды игроку X
    - notifyOthersTakenCard() - Метод оповещающий остальных игроков о том, что игрок X взял карту
    - passTurnToNextPlayer() - Метод передающий ход следующему игроку за столом
    - onGameFinished() - Метод обрабатывающий финиш игры
    - handleMultipleWinners() - Метод обрабатывающий финиш игры при нескольких победителях
    - changingBalanceWhenWin() - Метод изменяющий баланс победившему игроку
    - changingBalanceWhenLos() - Метод изменяющий баланс проигравшему игроку
    - changingBalanceEveryoneLoses() - Метод изменяющий баланс игрокам при той ситуации, когда проиграли все
    - playerLeave() - Обработчик выхода игрока из игры
    - creditingProfitsCasino() - Метод зачисляющий прибыль в казино
    
#Класс игры BlackJack
Games/BlackJack:
    - getInstance() - Метод возвращающий новый объект игры BlackJack
    - getWinners() - Метод определяющий победителей

#Менеджер работы с БД    
Database/DatabaseManager:
    - open() - Метод открывающий соединение с БД
    - close() - Метод закрывающий соединение с БД
    - executeQuery() - Метод обрабатывающий запрос с одним результатом в виде строки
    - executeQueryObject() - Метод обрабатывающий запрос с одним результатом в виде объекта QSqlQuery
    - executeQueryObjects() - Метод обрабатывающий запрос с множеством результатов в виде нескольких объектов QSqlQuery
    - executeQueryWithoutResponce() - Метод обрабатывающий запрос без ответа от БД
    - executeQueryDeleteWithoutResponce() - Метод удаляющий записей в БД с каскадным удалением
    - getModel() - Метод получения модели из БД
    
#Класс менеджера консольных команд
Commands/CommandManager:
    - init() - Метод запускающий регистрацию команд и запускающий отдельный поток их обработки
    - registerCommands() - Метод регистрирующий команды
    - parseCommand() - Метод парсящий строку команды на подстроки в виде QStringList
    - CommandHandler() - Обработчик входных команд из консоли
    
#Абстрактный класс команды
Commands/Command:
    - getTextAfterIndex() - Метод возвращающий подстроку из входной строки после определенного индекса
    - execute() - Метод обработки команды
    - getCommand() - Метод возвращающий имя команды
    - getHelpInfo() - Метод возвращающий подсказку по использованию команды
    
#Класс команды /ban
Commands/CommandBan:

#Класс команды /help
Commands/CommandHelp:

#Класс команды /list
Commands/CommandList:

#Класс команды /notification
Commands/CommandNotification:

#Класс команды /tableinfo
Commands/CommandTableInfo:

